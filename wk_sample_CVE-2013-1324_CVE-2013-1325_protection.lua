--alert http $EXTERNAL_NET any -> $HOME_NET any (msg:"ET LUAJIT Possible CVE-2013-132{4,5} Exploit"; flow:from_server,established; file_data; content:"|FF575043|"; within:4; content:"|D20B|"; luajit:CVE-2013-1324_CVE-2013-1325_spec.lua; classtype:trojan-activity; sid:379797901; rev:1;)

--- Cut here ---
--
--CVE-2013-1324_CVE-2013-1325_spec.lua
--
--sudo luarocks install struct bit debug
--
local struct = require 'struct'
local bit = require("bit")
local debug = require 'debug'
--
-- init
--
function init (args)
    local needs = {}
    needs["http.response_body"] = tostring(true)
    return needs
end
--
-- helper functions
--
function dd(stream, offset, blocksize)
   local co=offset
   io.write( string.format("%X (%d): ", offset, offset ) )
   while co < offset+blocksize do
       io.write( string.format("%02X",string.byte(stream,co)) .. " ") 
       co=co+1
   end 

   io.write( "\n" )
   return 0
end

--
-- Search for a seq of bytes (wrapper)
--
-- kludgy, *.gsub?
function fb(stream,str,offset,maxoffset)
	local off=offset
        local s_start,s_end=offset or -1,maxoffset or -1

        --old-school, but should do for now
	assert( off >= 1 and maxoffset > off and maxoffset-off >= string.len(str) and string.len(str) >= 1 )
        --debug.getinfo(1).currentline ), if needed

	while off < maxoffset do
		--can be optimized further for performance
		s_start,s_end=string.find(stream,str,off,true)
		--print( string.format( "s_start=%X s_end=%X\n", s_start,s_end) )
		if( s_start == nil or s_end == nil or s_end < s_start or s_start < off or s_end > maxoffset ) then
			if verbose==1 then print "[!] Invalid params, exiting ..." end
			return s_start,s_end
		end
		return s_start,s_end
	end
end

--
-- return match
--
function common(a,verbose)
	--input stream length
	local flen=string.len(a)
	local fsig=struct.unpack("<I4",string.sub(a,1,4))
	local sc_start,sc_end,continue_flag = 0,0,0
	--wp magic
	if( fsig ~= 0x435057FF or flen < 32 ) then
		return -1
	end 

	--load <document_area> per wp spec
	local off=struct.unpack("<I4",string.sub(a,5,9))+1
	if verbose == 1 then
		print( "[V] flen = " .. bit.tohex(flen) ) 
		print( "[V] fsig = " .. bit.tohex(fsig) )
		print( "[V] Document area offset = " .. bit.tohex(off) .. " (" .. off .. ")" )
	end
	-----------------------------------------------------------------------
	--main loop
	-----------------------------------------------------------------------
	repeat
		--find table records in <document_area>
		--use each found table record as "vantage point" for finding depending records
		sc_start=fb( a, string.char(0xD2,0x0B), off, flen-16 )
		if( sc_start == nil ) then
			--no table records found,abort
			break
		end
		local d20b_size=struct.unpack("<I2",string.sub(a, sc_start+2, sc_start+4))
		if verbose==1 then print( string.format( "[V] Loaded d20b size=%X", d20b_size) ) end
		--move search pointer
		off=sc_start+1
		if verbose==1 then print( "[D] off = " .. off .. " flen=" .. (flen-16) ) end

		--minimize fp by struct pre-validation

		-----------------------------------------------------------------------
		--helper loop, used as a workaround for lua <=v5.1 loop continue issue
		--if there is an issue / invalid format, we break, otherwise continue
		-----------------------------------------------------------------------
		--rinse and 
		repeat
			--validate structure size
			if( d20b_size == 0 or sc_start+d20b_size > flen-16 ) then
				--invalid size, move on to next match 
				off=sc_start+1
				print "[!] Pre-validation 1 failed, structure out of bounds, moving on..."
				--move to next table record, if any
				break
			end
			
			--run this only if no issues before	
			--load closing size and compare to ensure the structure is valid
			local d20b_verify=struct.unpack("<I2",string.sub(a, sc_start+2+d20b_size-2, sc_start+4+d20b_size-2))
			if( d20b_verify == nil or d20b_verify ~= d20b_size ) then
				if verbose==1 then print "[!] Pre-validation 2 failed, size does not match, moving on..." end
				off=sc_start+1
				--move to next table record, if any
				break
			end

			--find row record in the table record, according to guidance, needs
			--to be within the d2ob_size limits, but in actuality (according to the repro)
			--occurs after the table record epilogue, so assume it can be anywhere before file end
			sc_start2=fb( a, string.char(0xDC,0x01), sc_start+2, flen-16 )
			if( sc_start2 == nil ) then
				--not found, skip the rest
				break
			end

			--load element size
			dc01_size=struct.unpack("<I2",string.sub(a, sc_start2+2, sc_start2+4))
			if( dc01_size == 0 ) then
				--invalid size, skip the rest
				break
			end

			if verbose==1 then print( string.format( "[V] Loaded dc01 size=%X", dc01_size) ) end

			--check for malformed row with invalid # of CSTYL elements
			--check within limits of the row record as per spec
			sc_start3=fb( a, string.char(0x03,0x00,0x00), sc_start2+4, sc_start2+dc01_size )
			if( sc_start3 == nil ) then
				--not found,skip the rest	
				break
			end
			if verbose==1 then print( string.format( "[V] Found oldROW with CSTYLE" )) end
			
			--load newROW
			newROW_flag_size=string.byte(a,sc_start3+3)
			
			--sanity check
			newROW_size=bit.band(newROW_flag_size,0x7F)
			if( string.byte( a,sc_start3+3+newROW_size+1) == 0x03 ) then
				--sanity check
				if( bit.band( string.byte( a,sc_start3+3+newROW_size+4),0x80) == 0x80 ) then
					--found newROW
					--load rgbBorder[1/2]
					local rgbBorder_1=struct.unpack("<I2",string.sub(a, sc_start3+3+newROW_size+5, sc_start3+3+newROW_size+7))
					local rgbBorder_2=struct.unpack("<I2",string.sub(a, sc_start3+3+newROW_size+7, sc_start3+3+newROW_size+9))
					if verbose==1 then print( string.format( "[V] Loaded rgbBorder1=%x, rgbBorder2=%x\n",rgbBorder_1, rgbBorder_2 )) end
					--vulnerable record found
					if bit.band( rgbBorder_1, 0x7FFF ) > 0x6A0 then
						return 1
					elseif bit.band( rgbBorder_2, 0x7FFF ) > 0x6A0 then
						return 1
					end

					break
				else
					if verbose==1 then print "[!] CSTYL type check failed" end
					--check failed, skip the rest
					break
				end
			else
				--new row not found
				if verbose==1 then print "[!] CSTYL new row not found" end
				break
			end	
		-----------------------------------------------------------------------
		--EOH loop, used as a workaround for lua <=v5.1 loop continue issue
		--if there is an issue / invalid format, we break, otherwise continue
		-----------------------------------------------------------------------
		until 1

		--consume table opcode byte
		off=sc_start+1
		if verbose==1 then print( "[D] Current input offset=" .. off .. " total input length-16=" .. (flen-16) ) end
	until off > flen-16--16 is chosen as WP header length is 16 bytes (see spec)
    return 0
end

-- return match via table
function match(args)
    local t = tostring(args["http.response_body"])
    return common(t,0)
end

-- 
function run()
  local f = io.open(arg[1])
  local t = f:read("*all")
  f:close()

  if common(t,1) == 1 then print( "[*] Found CVE-2013-1324/1325 in " .. arg[1]) end
end
--- Cut here ---

